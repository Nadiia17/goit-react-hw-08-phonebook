{"version":3,"file":"static/js/331.84441c19.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { Formik, Field, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { selectContacts } from 'redux/selectors';\nimport toast from 'react-hot-toast';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  FormErrorMessage,\n  VStack,\n} from '@chakra-ui/react';\n\nconst PhonebookSchema = Yup.object().shape({\n  name: Yup.string().min(3).required('Name is required'),\n  number: Yup.string()\n    .matches(\n      /^\\d{3}-\\d{3}-\\d{4}$/,\n      'Phone number is not valid. Must be XXX-XXX-XXXX'\n    )\n    .required('Phone number is required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const currentContacts = useSelector(selectContacts);\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={PhonebookSchema}\n      onSubmit={(values, actions) => {\n        const isContactExists = currentContacts.some(\n          contact => contact.name.toLowerCase() === values.name.toLowerCase()\n        );\n        if (isContactExists) {\n          toast.error(`${values.name} is already in the phonebook`);\n        } else {\n          dispatch(addContact({ name: values.name, number: values.number }));\n          actions.resetForm();\n          toast.success(`${values.name} added to the phonebook`);\n        }\n      }}\n    >\n      {props => (\n        <Form>\n          <VStack spacing={4} align=\"start\" maxW=\"100%\" mx=\"auto\">\n            <Field name=\"name\">\n              {({ field, form }) => (\n                <FormControl isInvalid={form.errors.name && form.touched.name}>\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n                  <Input {...field} id=\"name\" placeholder=\"Enter name\" />\n                  <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                </FormControl>\n              )}\n            </Field>\n\n            <Field name=\"number\">\n              {({ field, form }) => (\n                <FormControl\n                  isInvalid={form.errors.number && form.touched.number}\n                >\n                  <FormLabel htmlFor=\"number\">Number</FormLabel>\n                  <Input\n                    {...field}\n                    id=\"number\"\n                    placeholder=\"Enter number XXX-XXX-XXXX\"\n                  />\n                  <FormErrorMessage>{form.errors.number}</FormErrorMessage>\n                </FormControl>\n              )}\n            </Field>\n\n            <Button mt={4} mx=\"auto\" type=\"submit\">\n              Add contact\n            </Button>\n          </VStack>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\n// import { useDispatch, useSelector } from 'react-redux';\n// import { addContact } from 'redux/operations';\n// import { Formik } from 'formik';\n// import * as Yup from 'yup';\n// import {\n//   StyledButton,\n//   StyledErrorMessage,\n//   StyledField,\n//   StyledForm,\n//   StyledLabel,\n// } from './ContactForm.styled';\n// import { selectContacts } from 'redux/selectors';\n// import toast from 'react-hot-toast';\n\n// const PhonebookSchema = Yup.object().shape({\n//   name: Yup.string().min(3).required('Name is required'),\n//   number: Yup.string()\n//     .matches(\n//       /^\\d{3}-\\d{3}-\\d{4}$/,\n//       'Phone number is not valid. Must be XXX-XXX-XXXX'\n//     )\n//     .required('Phone number is required'),\n// });\n\n// export const ContactForm = () => {\n//   const dispatch = useDispatch();\n//   const currentContacts = useSelector(selectContacts);\n\n//   return (\n//     <Formik\n//       initialValues={{\n//         name: '',\n//         number: '',\n//       }}\n//       validationSchema={PhonebookSchema}\n//       onSubmit={(values, actions) => {\n//         const isContactExists = currentContacts.some(\n//           contact => contact.name.toLowerCase() === values.name.toLowerCase()\n//         );\n//         if (isContactExists) {\n//           toast.error(`${values.name} is already in the phonebook`);\n//         } else {\n//           dispatch(addContact({ name: values.name, number: values.number }));\n//           actions.resetForm();\n//           toast.success(`${values.name} added to the phonebook`);\n//         }\n//       }}\n//     >\n//       <StyledForm>\n//         <StyledLabel>\n//           Name\n//           <StyledField name=\"name\" placeholder=\"Enter name\" />\n//           <StyledErrorMessage name=\"name\" component=\"div\" />\n//         </StyledLabel>\n\n//         <StyledLabel>\n//           Number\n//           <StyledField name=\"number\" placeholder=\"Enter number XXX-ХXX-ХХXX\" />\n//           <StyledErrorMessage name=\"number\" component=\"div\" />\n//         </StyledLabel>\n//         <StyledButton type=\"submit\">Add contact</StyledButton>\n//       </StyledForm>\n//     </Formik>\n//   );\n// };\n","import { Box, Button, Flex, Text } from '@chakra-ui/react';\nimport { FiUser, FiUserX } from 'react-icons/fi';\nimport { AiOutlinePhone } from 'react-icons/ai';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport toast from 'react-hot-toast';\n\nexport const ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id))\n      .unwrap()\n      .then(() => {\n        toast.success('Contact deleted successfully');\n      })\n      .catch(() => {\n        toast.error('Failed to delete contact');\n      });\n  };\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Box>\n        <Flex alignItems=\"center\">\n          <FiUser size=\"1.2em\" />\n          <Text ml=\"2\">{name}</Text>\n        </Flex>\n        <Flex alignItems=\"center\">\n          <AiOutlinePhone size=\"1.2em\" />\n          <Text ml=\"2\">{number}</Text>\n        </Flex>\n      </Box>\n\n      <Button borderRadius=\"5px\" px=\"3\" py=\"2\" onClick={handleDelete}>\n        <FiUserX size=\"1.2em\" />\n        <Text ml=\"2\">Delete</Text>\n      </Button>\n    </Flex>\n  );\n};\n\n// import toast from 'react-hot-toast';\n// import {\n//   ContactItemContainer,\n//   ContactText,\n//   DeleteButton,\n//   StyledContactIcon,\n//   StyledDeleteContact,\n//   StyledPhoneIcon,\n// } from './ContactItem.styled';\n// import { useDispatch } from 'react-redux';\n// import { deleteContact } from 'redux/operations';\n\n// export const ContactItem = ({ name, number, id }) => {\n//   const dispatch = useDispatch();\n\n//   const handleDelete = () => {\n//     dispatch(deleteContact(id))\n//       .unwrap() // Розпакування Promise, що повертається createAsyncThunk\n//       .then(() => {\n//         toast.success('Contact deleted successfully');\n//       })\n//       .catch(() => {\n//         toast.error('Failed to delete contact');\n//       });\n//   };\n\n//   return (\n//     <ContactItemContainer>\n//       <ContactText>\n//         <StyledContactIcon />\n//         {name}\n//       </ContactText>\n//       <ContactText>\n//         <StyledPhoneIcon />\n//         {number}\n//       </ContactText>\n\n//       <DeleteButton onClick={handleDelete}>\n//         <StyledDeleteContact />\n//         Delete\n//       </DeleteButton>\n//     </ContactItemContainer>\n//   );\n// };\n","import styled from 'styled-components';\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { MagnifyingGlass } from 'react-loader-spinner';\nimport { LoaderContainer } from './Loader.styled';\n\nexport const Loader = () => (\n  <LoaderContainer>\n    <MagnifyingGlass\n      visible={true}\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"Loading\"\n      wrapperClass=\"MagnifyingGlass-wrapper\"\n      glassColor=\"#B2F5EA\"\n      color=\"#319795\"\n    />\n  </LoaderContainer>\n);\n","import { useSelector } from 'react-redux';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\n// import { Contact, List } from './ContactList.styled';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\nimport { Loader } from 'components/Loader/Loader';\nimport toast from 'react-hot-toast';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/selectors';\nimport { Box, VStack } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    if (error) {\n      toast.error(`Error loading contacts: ${error}`);\n    }\n  }, [error]);\n\n  const filteredContacts = useSelector(selectVisibleContacts);\n  return (\n    <Box>\n      {isLoading && <Loader />}\n\n      <VStack spacing={4} align=\"stretch\">\n        {filteredContacts.map(contact => (\n          <Box\n            key={contact.id}\n            p={4}\n            borderWidth=\"1px\"\n            borderRadius=\"md\"\n            boxShadow=\"base\"\n          >\n            <ContactItem\n              name={contact.name}\n              number={contact.number}\n              id={contact.id}\n            />\n          </Box>\n        ))}\n      </VStack>\n    </Box>\n  );\n};\n\n//   return (\n//     <>\n//       {isLoading && <Loader />}\n\n//       <List>\n//         {filteredContacts.map(contact => (\n//           <Contact key={contact.id}>\n//             <ContactItem\n//               name={contact.name}\n//               number={contact.number}\n//               id={contact.id}\n//             />\n//           </Contact>\n//         ))}\n//       </List>\n//     </>\n//   );\n// };\n","// import { FilterContainer, FilterInput } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\n\nimport {\n  Box,\n  FormControl,\n  Input,\n  Text,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { selectFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  const filterBgColor = useColorModeValue('teal.200', 'teal.600');\n\n  return (\n    <Box\n      p={4}\n      borderWidth=\"1px\"\n      borderRadius=\"md\"\n      boxShadow=\"base\"\n      bg={filterBgColor}\n    >\n      <Text mb={2} fontSize=\"md\" fontWeight=\"bold\">\n        Find contacts by name\n      </Text>\n      <FormControl>\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Enter name to find\"\n          value={filter}\n          onChange={handleChange}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n//   return (\n//     <FilterContainer>\n//       <p>Find contacts by name</p>\n//       <FilterInput\n//         type=\"text\"\n//         name=\"filter\"\n//         placeholder=\"Enter name to find\"\n//         value={filter}\n//         onChange={handleChange}\n//       />\n//     </FilterContainer>\n//   );\n// };\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/operations';\nimport { Box } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts()); // Завантаження контактів при монтуванні сторінки\n  }, [dispatch]);\n\n  return (\n    <Box maxW=\"xl\" mx=\"auto\" mt={8} w=\"90%\">\n      <Box mb={4}>\n        <ContactForm />\n      </Box>\n      <Box mb={4}>\n        <Filter />\n      </Box>\n      <Box>\n        <ContactList />\n      </Box>\n    </Box>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","PhonebookSchema","Yup","shape","min","required","number","matches","ContactForm","dispatch","useDispatch","currentContacts","useSelector","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","some","toast","concat","addContact","resetForm","children","props","Form","_jsxs","VStack","spacing","align","maxW","mx","Field","_ref","field","form","FormControl","isInvalid","errors","touched","FormLabel","htmlFor","Input","_objectSpread","id","placeholder","FormErrorMessage","_ref2","Button","mt","type","ContactItem","Flex","justifyContent","alignItems","Box","FiUser","size","Text","ml","AiOutlinePhone","borderRadius","px","py","onClick","deleteContact","unwrap","then","catch","FiUserX","LoaderContainer","styled","_templateObject","_taggedTemplateLiteral","Loader","MagnifyingGlass","visible","height","width","ariaLabel","wrapperClass","glassColor","color","ContactList","useEffect","fetchContacts","filteredContacts","map","p","borderWidth","boxShadow","Filter","filterBgColor","useColorModeValue","bg","mb","fontSize","fontWeight","value","onChange","event","setFilter","target","Contacts","w"],"sourceRoot":""}